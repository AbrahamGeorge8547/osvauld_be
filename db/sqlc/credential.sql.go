// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: credential.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addCredential = `-- name: AddCredential :one
SELECT add_credential_with_access($1::JSONB)
`

func (q *Queries) AddCredential(ctx context.Context, dollar_1 json.RawMessage) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addCredential, dollar_1)
	var add_credential_with_access uuid.UUID
	err := row.Scan(&add_credential_with_access)
	return add_credential_with_access, err
}

const createCredential = `-- name: CreateCredential :one
INSERT INTO credentials (name, description, folder_id, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateCredentialParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	FolderID    uuid.NullUUID  `json:"folder_id"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
}

// sql/create_credential.sql
func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createCredential,
		arg.Name,
		arg.Description,
		arg.FolderID,
		arg.CreatedBy,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createEncryptedData = `-- name: CreateEncryptedData :one
INSERT INTO encrypted_data (field_name, credential_id, field_value, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateEncryptedDataParams struct {
	FieldName    string        `json:"field_name"`
	CredentialID uuid.NullUUID `json:"credential_id"`
	FieldValue   string        `json:"field_value"`
	UserID       uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CreateEncryptedData(ctx context.Context, arg CreateEncryptedDataParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createEncryptedData,
		arg.FieldName,
		arg.CredentialID,
		arg.FieldValue,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUnencryptedData = `-- name: CreateUnencryptedData :one
INSERT INTO unencrypted_data (field_name, credential_id, field_value)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateUnencryptedDataParams struct {
	FieldName    string        `json:"field_name"`
	CredentialID uuid.NullUUID `json:"credential_id"`
	FieldValue   string        `json:"field_value"`
}

func (q *Queries) CreateUnencryptedData(ctx context.Context, arg CreateUnencryptedDataParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUnencryptedData, arg.FieldName, arg.CredentialID, arg.FieldValue)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const fetchCredentialsByUserAndFolder = `-- name: FetchCredentialsByUserAndFolder :many
SELECT
  c.id AS "id",
  c.name AS "name",
  COALESCE(c.description, '') AS "description",
  json_agg(
    json_build_object(
      'fieldName', u.field_name,  -- Assuming actual column name is in snake_case
      'fieldValue', u.field_value  -- Assuming actual column name is in snake_case
    )
  ) AS "unencryptedData"
FROM credentials c
JOIN access_list a ON c.id = a.credential_id
LEFT JOIN unencrypted_data u ON c.id = u.credential_id
WHERE a.user_id = $1 AND c.folder_id = $2
GROUP BY c.id
`

type FetchCredentialsByUserAndFolderParams struct {
	UserID   uuid.NullUUID `json:"user_id"`
	FolderID uuid.NullUUID `json:"folder_id"`
}

type FetchCredentialsByUserAndFolderRow struct {
	ID              uuid.UUID       `json:"id"`
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	UnencryptedData json.RawMessage `json:"unencryptedData"`
}

func (q *Queries) FetchCredentialsByUserAndFolder(ctx context.Context, arg FetchCredentialsByUserAndFolderParams) ([]FetchCredentialsByUserAndFolderRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchCredentialsByUserAndFolder, arg.UserID, arg.FolderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchCredentialsByUserAndFolderRow{}
	for rows.Next() {
		var i FetchCredentialsByUserAndFolderRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UnencryptedData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCredentialDetails = `-- name: GetCredentialDetails :one
SELECT id, name, COALESCE(description, '') AS "description" 
FROM credentials
WHERE id = $1
`

type GetCredentialDetailsRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) GetCredentialDetails(ctx context.Context, id uuid.UUID) (GetCredentialDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getCredentialDetails, id)
	var i GetCredentialDetailsRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getCredentialUnencryptedData = `-- name: GetCredentialUnencryptedData :many
SELECT field_name AS "fieldName", field_value AS "fieldValue"
FROM unencrypted_data
WHERE credential_id = $1
`

type GetCredentialUnencryptedDataRow struct {
	FieldName  string `json:"fieldName"`
	FieldValue string `json:"fieldValue"`
}

func (q *Queries) GetCredentialUnencryptedData(ctx context.Context, credentialID uuid.NullUUID) ([]GetCredentialUnencryptedDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialUnencryptedData, credentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCredentialUnencryptedDataRow{}
	for rows.Next() {
		var i GetCredentialUnencryptedDataRow
		if err := rows.Scan(&i.FieldName, &i.FieldValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEncryptedCredentialsByFolder = `-- name: GetEncryptedCredentialsByFolder :many
SELECT 
    c.id, 
    json_agg(
        json_build_object(
            'fieldName', e.field_name, 
            'fieldValue', e.field_value
        )
    ) AS "encryptedFields"
FROM 
    credentials c
JOIN 
    encrypted_data e ON c.id = e.credential_id
WHERE 
    c.folder_id = $1 AND e.user_id = $2
GROUP BY 
    c.id
ORDER BY 
    c.id
`

type GetEncryptedCredentialsByFolderParams struct {
	FolderID uuid.NullUUID `json:"folder_id"`
	UserID   uuid.NullUUID `json:"user_id"`
}

type GetEncryptedCredentialsByFolderRow struct {
	ID              uuid.UUID       `json:"id"`
	EncryptedFields json.RawMessage `json:"encryptedFields"`
}

func (q *Queries) GetEncryptedCredentialsByFolder(ctx context.Context, arg GetEncryptedCredentialsByFolderParams) ([]GetEncryptedCredentialsByFolderRow, error) {
	rows, err := q.db.QueryContext(ctx, getEncryptedCredentialsByFolder, arg.FolderID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEncryptedCredentialsByFolderRow{}
	for rows.Next() {
		var i GetEncryptedCredentialsByFolderRow
		if err := rows.Scan(&i.ID, &i.EncryptedFields); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEncryptedDataByCredentialIds = `-- name: GetEncryptedDataByCredentialIds :many
SELECT 
    e.credential_id AS id, 
    json_agg(
        json_build_object(
            'fieldName', e.field_name, 
            'fieldValue', e.field_value
        )
    ) AS "encryptedFields"
FROM 
    encrypted_data e
WHERE 
    e.credential_id = ANY($1::uuid[]) AND e.user_id = $2
GROUP BY 
    e.credential_id
ORDER BY 
    e.credential_id
`

type GetEncryptedDataByCredentialIdsParams struct {
	Column1 []uuid.UUID   `json:"column_1"`
	UserID  uuid.NullUUID `json:"user_id"`
}

type GetEncryptedDataByCredentialIdsRow struct {
	ID              uuid.NullUUID   `json:"id"`
	EncryptedFields json.RawMessage `json:"encryptedFields"`
}

func (q *Queries) GetEncryptedDataByCredentialIds(ctx context.Context, arg GetEncryptedDataByCredentialIdsParams) ([]GetEncryptedDataByCredentialIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEncryptedDataByCredentialIds, pq.Array(arg.Column1), arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEncryptedDataByCredentialIdsRow{}
	for rows.Next() {
		var i GetEncryptedDataByCredentialIdsRow
		if err := rows.Scan(&i.ID, &i.EncryptedFields); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserEncryptedData = `-- name: GetUserEncryptedData :many
SELECT field_name AS "fieldName", field_value AS "fieldValue"
FROM encrypted_data
WHERE user_id = $1 AND credential_id = $2
`

type GetUserEncryptedDataParams struct {
	UserID       uuid.NullUUID `json:"user_id"`
	CredentialID uuid.NullUUID `json:"credential_id"`
}

type GetUserEncryptedDataRow struct {
	FieldName  string `json:"fieldName"`
	FieldValue string `json:"fieldValue"`
}

func (q *Queries) GetUserEncryptedData(ctx context.Context, arg GetUserEncryptedDataParams) ([]GetUserEncryptedDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserEncryptedData, arg.UserID, arg.CredentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserEncryptedDataRow{}
	for rows.Next() {
		var i GetUserEncryptedDataRow
		if err := rows.Scan(&i.FieldName, &i.FieldValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shareSecret = `-- name: ShareSecret :exec
SELECT share_secret($1::jsonb)
`

func (q *Queries) ShareSecret(ctx context.Context, dollar_1 json.RawMessage) error {
	_, err := q.db.ExecContext(ctx, shareSecret, dollar_1)
	return err
}
