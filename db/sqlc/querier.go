// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

type Querier interface {
	AddCredential(ctx context.Context, dollar_1 json.RawMessage) (uuid.UUID, error)
	AddMemberToGroup(ctx context.Context, arg AddMemberToGroupParams) error
	AddToAccessList(ctx context.Context, arg AddToAccessListParams) (uuid.UUID, error)
	// sql/create_credential.sql
	CreateCredential(ctx context.Context, arg CreateCredentialParams) (uuid.UUID, error)
	CreateEncryptedData(ctx context.Context, arg CreateEncryptedDataParams) (uuid.UUID, error)
	CreateFolder(ctx context.Context, arg CreateFolderParams) (uuid.UUID, error)
	CreateGroup(ctx context.Context, arg CreateGroupParams) (uuid.UUID, error)
	CreateUnencryptedData(ctx context.Context, arg CreateUnencryptedDataParams) (uuid.UUID, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error)
	FetchAccessibleAndCreatedFoldersByUser(ctx context.Context, createdBy uuid.NullUUID) ([]FetchAccessibleAndCreatedFoldersByUserRow, error)
	FetchCredentialsByUserAndFolder(ctx context.Context, arg FetchCredentialsByUserAndFolderParams) ([]FetchCredentialsByUserAndFolderRow, error)
	GetCredentialDetails(ctx context.Context, id uuid.UUID) (GetCredentialDetailsRow, error)
	GetCredentialIDsByUserID(ctx context.Context, userID uuid.NullUUID) ([]uuid.NullUUID, error)
	GetCredentialUnencryptedData(ctx context.Context, credentialID uuid.NullUUID) ([]GetCredentialUnencryptedDataRow, error)
	GetGroupMembers(ctx context.Context, members []uuid.UUID) ([]GetGroupMembersRow, error)
	GetUserByUsername(ctx context.Context, username string) (User, error)
	GetUserEncryptedData(ctx context.Context, arg GetUserEncryptedDataParams) ([]GetUserEncryptedDataRow, error)
	GetUserGroups(ctx context.Context, members []uuid.UUID) ([]Group, error)
	HasUserAccess(ctx context.Context, arg HasUserAccessParams) (bool, error)
	ShareSecret(ctx context.Context, arg ShareSecretParams) error
}

var _ Querier = (*Queries)(nil)
