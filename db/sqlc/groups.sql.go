// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: groups.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addMemberToGroup = `-- name: AddMemberToGroup :exec
UPDATE groups 
SET members = array_cat(members, $3)
WHERE id = $1 AND created_by = $2
RETURNING id
`

type AddMemberToGroupParams struct {
	ID        uuid.UUID     `json:"id"`
	CreatedBy uuid.NullUUID `json:"created_by"`
	ArrayCat  interface{}   `json:"array_cat"`
}

func (q *Queries) AddMemberToGroup(ctx context.Context, arg AddMemberToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToGroup, arg.ID, arg.CreatedBy, arg.ArrayCat)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name, members, created_by)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateGroupParams struct {
	Name      string        `json:"name"`
	Members   []uuid.UUID   `json:"members"`
	CreatedBy uuid.NullUUID `json:"created_by"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.Name, pq.Array(arg.Members), arg.CreatedBy)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getGroupMembers = `-- name: GetGroupMembers :many
SELECT u.id, u.username, u.name
FROM users u
JOIN groups g ON u.id = ANY(g.members)
WHERE $1 = ANY(g.members)
`

type GetGroupMembersRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Name     string    `json:"name"`
}

func (q *Queries) GetGroupMembers(ctx context.Context, members []uuid.UUID) ([]GetGroupMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMembers, pq.Array(members))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupMembersRow{}
	for rows.Next() {
		var i GetGroupMembersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroups = `-- name: GetUserGroups :many
SELECT groups.id, groups.created_at, groups.updated_at, groups.name, groups.members, groups.created_by
FROM groups
WHERE $1 = ANY(groups.members)
`

func (q *Queries) GetUserGroups(ctx context.Context, members []uuid.UUID) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroups, pq.Array(members))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			pq.Array(&i.Members),
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
