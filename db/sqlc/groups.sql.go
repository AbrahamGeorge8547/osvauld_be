// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: groups.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addMemberToGroup = `-- name: AddMemberToGroup :exec

INSERT INTO group_list (grouping_id, user_id, access_type)
SELECT $1, u.id, 'member'
FROM unnest($2::uuid[]) AS u(id)
LEFT JOIN group_list gl ON gl.grouping_id = $1 AND gl.user_id = u.id
WHERE gl.user_id IS NULL
`

type AddMemberToGroupParams struct {
	GroupingID uuid.UUID   `json:"grouping_id"`
	Column2    []uuid.UUID `json:"column_2"`
}

func (q *Queries) AddMemberToGroup(ctx context.Context, arg AddMemberToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToGroup, arg.GroupingID, pq.Array(arg.Column2))
	return err
}

const checkUserMemberOfGroup = `-- name: CheckUserMemberOfGroup :one
SELECT EXISTS (
  SELECT 1 FROM group_list
  WHERE user_id = $1 AND grouping_id = $2
) as "exists"
`

type CheckUserMemberOfGroupParams struct {
	UserID     uuid.UUID `json:"user_id"`
	GroupingID uuid.UUID `json:"grouping_id"`
}

func (q *Queries) CheckUserMemberOfGroup(ctx context.Context, arg CheckUserMemberOfGroupParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserMemberOfGroup, arg.UserID, arg.GroupingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createGroup = `-- name: CreateGroup :exec
WITH new_group AS (
  INSERT INTO groupings (name, created_by)
  VALUES ($1, $2)
  RETURNING id
)
INSERT INTO group_list (grouping_id, user_id, access_type)
SELECT id, $2, 'owner'
FROM new_group
`

type CreateGroupParams struct {
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) error {
	_, err := q.db.ExecContext(ctx, createGroup, arg.Name, arg.UserID)
	return err
}

const fetchCredentialIDsWithGroupAccess = `-- name: FetchCredentialIDsWithGroupAccess :many
SELECT distinct(credential_id) from access_list
WHERE group_id = $1
`

func (q *Queries) FetchCredentialIDsWithGroupAccess(ctx context.Context, groupID uuid.NullUUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, fetchCredentialIDsWithGroupAccess, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var credential_id uuid.UUID
		if err := rows.Scan(&credential_id); err != nil {
			return nil, err
		}
		items = append(items, credential_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupMembers = `-- name: GetGroupMembers :many
SELECT u.id, u.name, u.username, u.public_key as "publicKey"
FROM users u
JOIN group_list gl ON u.id = gl.user_id
WHERE gl.grouping_id = $1
`

type GetGroupMembersRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Username  string    `json:"username"`
	PublicKey string    `json:"publicKey"`
}

func (q *Queries) GetGroupMembers(ctx context.Context, groupingID uuid.UUID) ([]GetGroupMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMembers, groupingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupMembersRow{}
	for rows.Next() {
		var i GetGroupMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.PublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroups = `-- name: GetUserGroups :many
SELECT g.id, g.created_at, g.updated_at, g.name, g.created_by
FROM groupings g
JOIN group_list gl ON g.id = gl.grouping_id
WHERE gl.user_id = $1
`

func (q *Queries) GetUserGroups(ctx context.Context, userID uuid.UUID) ([]Grouping, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroups, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Grouping{}
	for rows.Next() {
		var i Grouping
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
