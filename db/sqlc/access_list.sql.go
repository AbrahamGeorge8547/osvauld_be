// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: access_list.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addToAccessList = `-- name: AddToAccessList :one

INSERT INTO access_list (credential_id, user_id, access_type)
VALUES ($1, $2, $3)
RETURNING id
`

type AddToAccessListParams struct {
	CredentialID uuid.NullUUID `json:"credential_id"`
	UserID       uuid.NullUUID `json:"user_id"`
	AccessType   string        `json:"access_type"`
}

func (q *Queries) AddToAccessList(ctx context.Context, arg AddToAccessListParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addToAccessList, arg.CredentialID, arg.UserID, arg.AccessType)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const hasUserAccess = `-- name: HasUserAccess :one
SELECT EXISTS (
  SELECT 1
  FROM access_list
  WHERE user_id = $1 AND credential_id = $2
) AS has_access
`

type HasUserAccessParams struct {
	UserID       uuid.NullUUID `json:"user_id"`
	CredentialID uuid.NullUUID `json:"credential_id"`
}

func (q *Queries) HasUserAccess(ctx context.Context, arg HasUserAccessParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasUserAccess, arg.UserID, arg.CredentialID)
	var has_access bool
	err := row.Scan(&has_access)
	return has_access, err
}
