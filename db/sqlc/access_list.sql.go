// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: access_list.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addToAccessList = `-- name: AddToAccessList :one

INSERT INTO access_list (credential_id, user_id, access_type, group_id)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type AddToAccessListParams struct {
	CredentialID uuid.UUID     `json:"credential_id"`
	UserID       uuid.UUID     `json:"user_id"`
	AccessType   string        `json:"access_type"`
	GroupID      uuid.NullUUID `json:"group_id"`
}

func (q *Queries) AddToAccessList(ctx context.Context, arg AddToAccessListParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addToAccessList,
		arg.CredentialID,
		arg.UserID,
		arg.AccessType,
		arg.GroupID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const checkAccessListEntryExists = `-- name: CheckAccessListEntryExists :one
SELECT EXISTS (
    SELECT 1
    FROM access_list
    WHERE user_id = $1 AND credential_id = $2
)
`

type CheckAccessListEntryExistsParams struct {
	UserID       uuid.UUID `json:"user_id"`
	CredentialID uuid.UUID `json:"credential_id"`
}

func (q *Queries) CheckAccessListEntryExists(ctx context.Context, arg CheckAccessListEntryExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkAccessListEntryExists, arg.UserID, arg.CredentialID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCredentialAccessForUser = `-- name: GetCredentialAccessForUser :many
SELECT id, user_id, credential_id, group_id, access_type
FROM access_list
WHERE user_id = $1 AND credential_id = $2
`

type GetCredentialAccessForUserParams struct {
	UserID       uuid.UUID `json:"user_id"`
	CredentialID uuid.UUID `json:"credential_id"`
}

type GetCredentialAccessForUserRow struct {
	ID           uuid.UUID     `json:"id"`
	UserID       uuid.UUID     `json:"user_id"`
	CredentialID uuid.UUID     `json:"credential_id"`
	GroupID      uuid.NullUUID `json:"group_id"`
	AccessType   string        `json:"access_type"`
}

func (q *Queries) GetCredentialAccessForUser(ctx context.Context, arg GetCredentialAccessForUserParams) ([]GetCredentialAccessForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialAccessForUser, arg.UserID, arg.CredentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCredentialAccessForUserRow{}
	for rows.Next() {
		var i GetCredentialAccessForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CredentialID,
			&i.GroupID,
			&i.AccessType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCredentialIDsByUserID = `-- name: GetCredentialIDsByUserID :many
SELECT credential_id FROM access_list WHERE user_id = $1
`

func (q *Queries) GetCredentialIDsByUserID(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialIDsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var credential_id uuid.UUID
		if err := rows.Scan(&credential_id); err != nil {
			return nil, err
		}
		items = append(items, credential_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByCredential = `-- name: GetUsersByCredential :many
SELECT users.id, users.username, users.name, COALESCE(users.rsa_pub_key, '') as "publicKey", access_list.access_type as "accessType"
FROM access_list
JOIN users ON access_list.user_id = users.id
WHERE access_list.credential_id = $1
`

type GetUsersByCredentialRow struct {
	ID         uuid.UUID `json:"id"`
	Username   string    `json:"username"`
	Name       string    `json:"name"`
	PublicKey  string    `json:"publicKey"`
	AccessType string    `json:"accessType"`
}

func (q *Queries) GetUsersByCredential(ctx context.Context, credentialID uuid.UUID) ([]GetUsersByCredentialRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByCredential, credentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByCredentialRow{}
	for rows.Next() {
		var i GetUsersByCredentialRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.PublicKey,
			&i.AccessType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByFolder = `-- name: GetUsersByFolder :many
SELECT DISTINCT u.id, u.username, u.name, COALESCE(u.rsa_pub_key, '') as "publicKey"
FROM users u
JOIN access_list al ON u.id = al.user_id
JOIN credentials c ON al.credential_id = c.id
WHERE c.folder_id = $1
`

type GetUsersByFolderRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Name      string    `json:"name"`
	PublicKey string    `json:"publicKey"`
}

func (q *Queries) GetUsersByFolder(ctx context.Context, folderID uuid.UUID) ([]GetUsersByFolderRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByFolder, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByFolderRow{}
	for rows.Next() {
		var i GetUsersByFolderRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.PublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
