// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: field.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addFieldData = `-- name: AddFieldData :one
INSERT INTO
    encrypted_data (field_name, field_value, credential_id, field_type, user_id)
VALUES
    ($1, $2, $3, $4, $5) RETURNING id
`

type AddFieldDataParams struct {
	FieldName    string    `json:"fieldName"`
	FieldValue   string    `json:"fieldValue"`
	CredentialID uuid.UUID `json:"credentialId"`
	FieldType    string    `json:"fieldType"`
	UserID       uuid.UUID `json:"userId"`
}

func (q *Queries) AddFieldData(ctx context.Context, arg AddFieldDataParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addFieldData,
		arg.FieldName,
		arg.FieldValue,
		arg.CredentialID,
		arg.FieldType,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const fetchFieldNameAndTypeByFieldIDForUser = `-- name: FetchFieldNameAndTypeByFieldIDForUser :one
SELECT
    encrypted_data.field_name,
    encrypted_data.field_type
FROM encrypted_data
WHERE encrypted_data.id = $1 AND encrypted_data.user_id = $2
`

type FetchFieldNameAndTypeByFieldIDForUserParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
}

type FetchFieldNameAndTypeByFieldIDForUserRow struct {
	FieldName string `json:"fieldName"`
	FieldType string `json:"fieldType"`
}

func (q *Queries) FetchFieldNameAndTypeByFieldIDForUser(ctx context.Context, arg FetchFieldNameAndTypeByFieldIDForUserParams) (FetchFieldNameAndTypeByFieldIDForUserRow, error) {
	row := q.db.QueryRowContext(ctx, fetchFieldNameAndTypeByFieldIDForUser, arg.ID, arg.UserID)
	var i FetchFieldNameAndTypeByFieldIDForUserRow
	err := row.Scan(&i.FieldName, &i.FieldType)
	return i, err
}
