// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: field.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addFieldData = `-- name: AddFieldData :one
INSERT INTO
    encrypted_data (field_name, field_value, credential_id, field_type, user_id)
VALUES
    ($1, $2, $3, $4, $5) RETURNING id
`

type AddFieldDataParams struct {
	FieldName    string    `json:"fieldName"`
	FieldValue   string    `json:"fieldValue"`
	CredentialID uuid.UUID `json:"credentialId"`
	FieldType    string    `json:"fieldType"`
	UserID       uuid.UUID `json:"userId"`
}

func (q *Queries) AddFieldData(ctx context.Context, arg AddFieldDataParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addFieldData,
		arg.FieldName,
		arg.FieldValue,
		arg.CredentialID,
		arg.FieldType,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const checkFieldEntryExists = `-- name: CheckFieldEntryExists :one
SELECT EXISTS (
    SELECT 1
    FROM encrypted_data
    WHERE credential_id = $1 AND user_id = $2
)
`

type CheckFieldEntryExistsParams struct {
	CredentialID uuid.UUID `json:"credentialId"`
	UserID       uuid.UUID `json:"userId"`
}

func (q *Queries) CheckFieldEntryExists(ctx context.Context, arg CheckFieldEntryExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkFieldEntryExists, arg.CredentialID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getFieldDataByCredentialIDsForUser = `-- name: GetFieldDataByCredentialIDsForUser :many
SELECT
    encrypted_data.id,
    encrypted_data.credential_id,
    encrypted_data.field_name,
    encrypted_data.field_value,
    encrypted_data.field_type
FROM encrypted_data
WHERE encrypted_data.user_id = $1 
AND encrypted_data.credential_id = ANY($2::UUID[])
`

type GetFieldDataByCredentialIDsForUserParams struct {
	UserID      uuid.UUID   `json:"userId"`
	Credentials []uuid.UUID `json:"credentials"`
}

type GetFieldDataByCredentialIDsForUserRow struct {
	ID           uuid.UUID `json:"id"`
	CredentialID uuid.UUID `json:"credentialId"`
	FieldName    string    `json:"fieldName"`
	FieldValue   string    `json:"fieldValue"`
	FieldType    string    `json:"fieldType"`
}

func (q *Queries) GetFieldDataByCredentialIDsForUser(ctx context.Context, arg GetFieldDataByCredentialIDsForUserParams) ([]GetFieldDataByCredentialIDsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFieldDataByCredentialIDsForUser, arg.UserID, pq.Array(arg.Credentials))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFieldDataByCredentialIDsForUserRow{}
	for rows.Next() {
		var i GetFieldDataByCredentialIDsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CredentialID,
			&i.FieldName,
			&i.FieldValue,
			&i.FieldType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
