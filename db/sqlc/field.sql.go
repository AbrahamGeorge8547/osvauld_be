// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: field.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const fetchFieldNameAndTypeByFieldIDForUser = `-- name: FetchFieldNameAndTypeByFieldIDForUser :one
SELECT
    encrypted_data.field_name,
    encrypted_data.field_type
FROM encrypted_data
WHERE encrypted_data.id = $1 AND encrypted_data.user_id = $2
`

type FetchFieldNameAndTypeByFieldIDForUserParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
}

type FetchFieldNameAndTypeByFieldIDForUserRow struct {
	FieldName string `json:"fieldName"`
	FieldType string `json:"fieldType"`
}

func (q *Queries) FetchFieldNameAndTypeByFieldIDForUser(ctx context.Context, arg FetchFieldNameAndTypeByFieldIDForUserParams) (FetchFieldNameAndTypeByFieldIDForUserRow, error) {
	row := q.db.QueryRowContext(ctx, fetchFieldNameAndTypeByFieldIDForUser, arg.ID, arg.UserID)
	var i FetchFieldNameAndTypeByFieldIDForUserRow
	err := row.Scan(&i.FieldName, &i.FieldType)
	return i, err
}
