// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: folder_access.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addFolderAccess = `-- name: AddFolderAccess :exec
INSERT INTO folder_access (folder_id, user_id, access_type, group_id)
VALUES ($1, $2, $3, $4)
`

type AddFolderAccessParams struct {
	FolderID   uuid.UUID     `json:"folderId"`
	UserID     uuid.UUID     `json:"userId"`
	AccessType string        `json:"accessType"`
	GroupID    uuid.NullUUID `json:"groupId"`
}

func (q *Queries) AddFolderAccess(ctx context.Context, arg AddFolderAccessParams) error {
	_, err := q.db.ExecContext(ctx, addFolderAccess,
		arg.FolderID,
		arg.UserID,
		arg.AccessType,
		arg.GroupID,
	)
	return err
}

const checkFolderAccessEntryExists = `-- name: CheckFolderAccessEntryExists :one
SELECT EXISTS (
    SELECT 1
    FROM folder_access
    WHERE user_id = $1 AND folder_id = $2 
    AND ((group_id IS NOT NULL AND group_id = $3) OR (group_id is null and $3 is null)) 
)
`

type CheckFolderAccessEntryExistsParams struct {
	UserID   uuid.UUID     `json:"userId"`
	FolderID uuid.UUID     `json:"folderId"`
	GroupID  uuid.NullUUID `json:"groupId"`
}

func (q *Queries) CheckFolderAccessEntryExists(ctx context.Context, arg CheckFolderAccessEntryExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkFolderAccessEntryExists, arg.UserID, arg.FolderID, arg.GroupID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const editFolderAccessForGroup = `-- name: EditFolderAccessForGroup :exec
UPDATE folder_access
SET access_type = $1
WHERE folder_id = $2 AND group_id = $3
`

type EditFolderAccessForGroupParams struct {
	AccessType string        `json:"accessType"`
	FolderID   uuid.UUID     `json:"folderId"`
	GroupID    uuid.NullUUID `json:"groupId"`
}

func (q *Queries) EditFolderAccessForGroup(ctx context.Context, arg EditFolderAccessForGroupParams) error {
	_, err := q.db.ExecContext(ctx, editFolderAccessForGroup, arg.AccessType, arg.FolderID, arg.GroupID)
	return err
}

const editFolderAccessForUser = `-- name: EditFolderAccessForUser :exec
UPDATE folder_access
SET access_type = $1
WHERE group_id IS NULL
AND folder_id = $2 AND user_id = $3
`

type EditFolderAccessForUserParams struct {
	AccessType string    `json:"accessType"`
	FolderID   uuid.UUID `json:"folderId"`
	UserID     uuid.UUID `json:"userId"`
}

func (q *Queries) EditFolderAccessForUser(ctx context.Context, arg EditFolderAccessForUserParams) error {
	_, err := q.db.ExecContext(ctx, editFolderAccessForUser, arg.AccessType, arg.FolderID, arg.UserID)
	return err
}

const hasManageAccessForFolder = `-- name: HasManageAccessForFolder :one
SELECT EXISTS (
  SELECT 1 FROM folder_access
  WHERE folder_id = $1 AND user_id = $2 AND access_type = 'owner'
)
`

type HasManageAccessForFolderParams struct {
	FolderID uuid.UUID `json:"folderId"`
	UserID   uuid.UUID `json:"userId"`
}

func (q *Queries) HasManageAccessForFolder(ctx context.Context, arg HasManageAccessForFolderParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasManageAccessForFolder, arg.FolderID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const hasReadAccessForFolder = `-- name: HasReadAccessForFolder :one
SELECT EXISTS (
  SELECT 1 FROM folder_access
  WHERE folder_id = $1 AND user_id = $2 AND access_type = 'reader'
)
`

type HasReadAccessForFolderParams struct {
	FolderID uuid.UUID `json:"folderId"`
	UserID   uuid.UUID `json:"userId"`
}

func (q *Queries) HasReadAccessForFolder(ctx context.Context, arg HasReadAccessForFolderParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasReadAccessForFolder, arg.FolderID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeFolderAccessForGroups = `-- name: RemoveFolderAccessForGroups :exec
DELETE FROM folder_access WHERE folder_id = $1 AND group_id = ANY($2::UUID[])
`

type RemoveFolderAccessForGroupsParams struct {
	FolderID uuid.UUID   `json:"folderId"`
	GroupIds []uuid.UUID `json:"groupIds"`
}

func (q *Queries) RemoveFolderAccessForGroups(ctx context.Context, arg RemoveFolderAccessForGroupsParams) error {
	_, err := q.db.ExecContext(ctx, removeFolderAccessForGroups, arg.FolderID, pq.Array(arg.GroupIds))
	return err
}

const removeFolderAccessForUsers = `-- name: RemoveFolderAccessForUsers :exec
DELETE FROM folder_access WHERE group_id IS NULL 
AND folder_id = $1 AND user_id = ANY($2::UUID[])
`

type RemoveFolderAccessForUsersParams struct {
	FolderID uuid.UUID   `json:"folderId"`
	UserIds  []uuid.UUID `json:"userIds"`
}

func (q *Queries) RemoveFolderAccessForUsers(ctx context.Context, arg RemoveFolderAccessForUsersParams) error {
	_, err := q.db.ExecContext(ctx, removeFolderAccessForUsers, arg.FolderID, pq.Array(arg.UserIds))
	return err
}
