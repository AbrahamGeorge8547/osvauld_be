// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: environment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addEnvironment = `-- name: AddEnvironment :one
INSERT INTO environments (
    cli_user, 
    name, 
    created_by
) VALUES (
    $1, 
    $2, 
    $3
)
RETURNING Id
`

type AddEnvironmentParams struct {
	CliUser   uuid.NullUUID `json:"cliUser"`
	Name      string        `json:"name"`
	CreatedBy uuid.NullUUID `json:"createdBy"`
}

func (q *Queries) AddEnvironment(ctx context.Context, arg AddEnvironmentParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addEnvironment, arg.CliUser, arg.Name, arg.CreatedBy)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const checkCredentialExistsForEnv = `-- name: CheckCredentialExistsForEnv :one
SELECT EXISTS (
    SELECT 1 
    FROM environment_fields 
    WHERE credential_id = $1 AND env_id = $2
)
`

type CheckCredentialExistsForEnvParams struct {
	CredentialID uuid.UUID `json:"credentialId"`
	EnvID        uuid.UUID `json:"envId"`
}

func (q *Queries) CheckCredentialExistsForEnv(ctx context.Context, arg CheckCredentialExistsForEnvParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCredentialExistsForEnv, arg.CredentialID, arg.EnvID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createEnvFields = `-- name: CreateEnvFields :one
INSERT INTO environment_fields (
    cli_user, 
    credential_id, 
    field_value, 
    field_name, 
    parent_field_id, 
    env_id
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
)
RETURNING id
`

type CreateEnvFieldsParams struct {
	CliUser       uuid.UUID `json:"cliUser"`
	CredentialID  uuid.UUID `json:"credentialId"`
	FieldValue    string    `json:"fieldValue"`
	FieldName     string    `json:"fieldName"`
	ParentFieldID uuid.UUID `json:"parentFieldId"`
	EnvID         uuid.UUID `json:"envId"`
}

func (q *Queries) CreateEnvFields(ctx context.Context, arg CreateEnvFieldsParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createEnvFields,
		arg.CliUser,
		arg.CredentialID,
		arg.FieldValue,
		arg.FieldName,
		arg.ParentFieldID,
		arg.EnvID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
