// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: credential_access.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addCredentialAccess = `-- name: AddCredentialAccess :one

INSERT INTO credential_access (credential_id, user_id, access_type, group_id, folder_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type AddCredentialAccessParams struct {
	CredentialID uuid.UUID     `json:"credentialId"`
	UserID       uuid.UUID     `json:"userId"`
	AccessType   string        `json:"accessType"`
	GroupID      uuid.NullUUID `json:"groupId"`
	FolderID     uuid.NullUUID `json:"folderId"`
}

func (q *Queries) AddCredentialAccess(ctx context.Context, arg AddCredentialAccessParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addCredentialAccess,
		arg.CredentialID,
		arg.UserID,
		arg.AccessType,
		arg.GroupID,
		arg.FolderID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const checkCredentialAccessEntryExists = `-- name: CheckCredentialAccessEntryExists :one
SELECT EXISTS (
    SELECT 1
    FROM credential_access
    WHERE user_id = $1 AND credential_id = $2 
    AND ((group_id IS NOT NULL AND group_id = $3) OR (group_id is null and $3 is null)) 
    AND ((folder_id IS NOT NULL AND folder_id = $4) OR (folder_id is null and $4 is null))
)
`

type CheckCredentialAccessEntryExistsParams struct {
	UserID       uuid.UUID     `json:"userId"`
	CredentialID uuid.UUID     `json:"credentialId"`
	GroupID      uuid.NullUUID `json:"groupId"`
	FolderID     uuid.NullUUID `json:"folderId"`
}

func (q *Queries) CheckCredentialAccessEntryExists(ctx context.Context, arg CheckCredentialAccessEntryExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCredentialAccessEntryExists,
		arg.UserID,
		arg.CredentialID,
		arg.GroupID,
		arg.FolderID,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCredentialAccessForUser = `-- name: GetCredentialAccessForUser :many
SELECT id, user_id, credential_id, group_id, access_type
FROM credential_access
WHERE user_id = $1 AND credential_id = $2
`

type GetCredentialAccessForUserParams struct {
	UserID       uuid.UUID `json:"userId"`
	CredentialID uuid.UUID `json:"credentialId"`
}

type GetCredentialAccessForUserRow struct {
	ID           uuid.UUID     `json:"id"`
	UserID       uuid.UUID     `json:"userId"`
	CredentialID uuid.UUID     `json:"credentialId"`
	GroupID      uuid.NullUUID `json:"groupId"`
	AccessType   string        `json:"accessType"`
}

func (q *Queries) GetCredentialAccessForUser(ctx context.Context, arg GetCredentialAccessForUserParams) ([]GetCredentialAccessForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialAccessForUser, arg.UserID, arg.CredentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCredentialAccessForUserRow{}
	for rows.Next() {
		var i GetCredentialAccessForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CredentialID,
			&i.GroupID,
			&i.AccessType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCredentialIDsByUserID = `-- name: GetCredentialIDsByUserID :many
SELECT credential_id FROM credential_access WHERE user_id = $1
`

func (q *Queries) GetCredentialIDsByUserID(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialIDsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var credential_id uuid.UUID
		if err := rows.Scan(&credential_id); err != nil {
			return nil, err
		}
		items = append(items, credential_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByCredential = `-- name: GetUsersByCredential :many
SELECT users.id, users.username, users.name, COALESCE(users.encryption_key, '') as "publicKey", credential_access.access_type as "accessType"
FROM credential_access
JOIN users ON credential_access.user_id = users.id
WHERE credential_access.credential_id = $1
`

type GetUsersByCredentialRow struct {
	ID         uuid.UUID `json:"id"`
	Username   string    `json:"username"`
	Name       string    `json:"name"`
	PublicKey  string    `json:"publicKey"`
	AccessType string    `json:"accessType"`
}

func (q *Queries) GetUsersByCredential(ctx context.Context, credentialID uuid.UUID) ([]GetUsersByCredentialRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByCredential, credentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByCredentialRow{}
	for rows.Next() {
		var i GetUsersByCredentialRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.PublicKey,
			&i.AccessType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCredentialAccessForGroups = `-- name: RemoveCredentialAccessForGroups :exec
DELETE FROM credential_access WHERE folder_id IS NULL 
AND credential_id = $1 AND group_id = ANY($2::UUID[])
`

type RemoveCredentialAccessForGroupsParams struct {
	CredentialID uuid.UUID   `json:"credentialId"`
	GroupIds     []uuid.UUID `json:"groupIds"`
}

func (q *Queries) RemoveCredentialAccessForGroups(ctx context.Context, arg RemoveCredentialAccessForGroupsParams) error {
	_, err := q.db.ExecContext(ctx, removeCredentialAccessForGroups, arg.CredentialID, pq.Array(arg.GroupIds))
	return err
}

const removeCredentialAccessForGroupsWithFolderID = `-- name: RemoveCredentialAccessForGroupsWithFolderID :exec
DELETE FROM credential_access WHERE folder_id = $1 AND group_id = ANY($2::UUID[])
`

type RemoveCredentialAccessForGroupsWithFolderIDParams struct {
	FolderID uuid.NullUUID `json:"folderId"`
	GroupIds []uuid.UUID   `json:"groupIds"`
}

func (q *Queries) RemoveCredentialAccessForGroupsWithFolderID(ctx context.Context, arg RemoveCredentialAccessForGroupsWithFolderIDParams) error {
	_, err := q.db.ExecContext(ctx, removeCredentialAccessForGroupsWithFolderID, arg.FolderID, pq.Array(arg.GroupIds))
	return err
}

const removeCredentialAccessForUsers = `-- name: RemoveCredentialAccessForUsers :exec
DELETE FROM credential_access WHERE group_id IS NULL AND folder_id IS NULL 
AND credential_id = $1 AND user_id = ANY($2::UUID[])
`

type RemoveCredentialAccessForUsersParams struct {
	CredentialID uuid.UUID   `json:"credentialId"`
	UserIds      []uuid.UUID `json:"userIds"`
}

func (q *Queries) RemoveCredentialAccessForUsers(ctx context.Context, arg RemoveCredentialAccessForUsersParams) error {
	_, err := q.db.ExecContext(ctx, removeCredentialAccessForUsers, arg.CredentialID, pq.Array(arg.UserIds))
	return err
}

const removeCredentialAccessForUsersWithFolderID = `-- name: RemoveCredentialAccessForUsersWithFolderID :exec
DELETE FROM credential_access WHERE group_id IS NULL
AND folder_id = $1 AND user_id = ANY($2::UUID[])
`

type RemoveCredentialAccessForUsersWithFolderIDParams struct {
	FolderID uuid.NullUUID `json:"folderId"`
	UserIds  []uuid.UUID   `json:"userIds"`
}

func (q *Queries) RemoveCredentialAccessForUsersWithFolderID(ctx context.Context, arg RemoveCredentialAccessForUsersWithFolderIDParams) error {
	_, err := q.db.ExecContext(ctx, removeCredentialAccessForUsersWithFolderID, arg.FolderID, pq.Array(arg.UserIds))
	return err
}

const removeFolderAccessForGroups = `-- name: RemoveFolderAccessForGroups :exec
DELETE FROM folder_access WHERE folder_id = $1 AND group_id = ANY($2::UUID[])
`

type RemoveFolderAccessForGroupsParams struct {
	FolderID uuid.UUID   `json:"folderId"`
	GroupIds []uuid.UUID `json:"groupIds"`
}

func (q *Queries) RemoveFolderAccessForGroups(ctx context.Context, arg RemoveFolderAccessForGroupsParams) error {
	_, err := q.db.ExecContext(ctx, removeFolderAccessForGroups, arg.FolderID, pq.Array(arg.GroupIds))
	return err
}

const removeFolderAccessForUsers = `-- name: RemoveFolderAccessForUsers :exec
DELETE FROM folder_access WHERE group_id IS NULL 
AND folder_id = $1 AND user_id = ANY($2::UUID[])
`

type RemoveFolderAccessForUsersParams struct {
	FolderID uuid.UUID   `json:"folderId"`
	UserIds  []uuid.UUID `json:"userIds"`
}

func (q *Queries) RemoveFolderAccessForUsers(ctx context.Context, arg RemoveFolderAccessForUsersParams) error {
	_, err := q.db.ExecContext(ctx, removeFolderAccessForUsers, arg.FolderID, pq.Array(arg.UserIds))
	return err
}
