// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cache_refresh.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCacheRefresh = `-- name: CreateCacheRefresh :exec
INSERT INTO cache_refresh (folder_id, user_id, credential_id, type)
VALUES ($1, $2, $3, $4)
`

type CreateCacheRefreshParams struct {
	FolderID     uuid.UUID `json:"folderId"`
	UserID       uuid.UUID `json:"userId"`
	CredentialID uuid.UUID `json:"credentialId"`
	Type         string    `json:"type"`
}

func (q *Queries) CreateCacheRefresh(ctx context.Context, arg CreateCacheRefreshParams) error {
	_, err := q.db.ExecContext(ctx, createCacheRefresh,
		arg.FolderID,
		arg.UserID,
		arg.CredentialID,
		arg.Type,
	)
	return err
}

const getCredentialIdsByUserIdForCacheRefresh = `-- name: GetCredentialIdsByUserIdForCacheRefresh :many
SELECT credential_id AS "credentialId"
FROM cache_refresh
WHERE user_id = $1
`

func (q *Queries) GetCredentialIdsByUserIdForCacheRefresh(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialIdsByUserIdForCacheRefresh, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var credentialId uuid.UUID
		if err := rows.Scan(&credentialId); err != nil {
			return nil, err
		}
		items = append(items, credentialId)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
