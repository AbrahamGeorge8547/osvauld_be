// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: folder.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (name, description, created_by)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateFolderParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createFolder, arg.Name, arg.Description, arg.CreatedBy)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const fetchAccessibleAndCreatedFoldersByUser = `-- name: FetchAccessibleAndCreatedFoldersByUser :many
WITH unique_credential_ids AS (
  SELECT DISTINCT credential_id
  FROM access_list
  WHERE user_id = $1
),
unique_folder_ids AS (
  SELECT DISTINCT folder_id
  FROM credentials
  WHERE id IN (SELECT credential_id FROM unique_credential_ids)
)
SELECT 
    id, 
    name, 
    COALESCE(description, '') AS description 
FROM folders f
WHERE f.id IN (SELECT folder_id FROM unique_folder_ids)
   OR f.created_by = $1
`

type FetchAccessibleAndCreatedFoldersByUserRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) FetchAccessibleAndCreatedFoldersByUser(ctx context.Context, createdBy uuid.NullUUID) ([]FetchAccessibleAndCreatedFoldersByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAccessibleAndCreatedFoldersByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchAccessibleAndCreatedFoldersByUserRow{}
	for rows.Next() {
		var i FetchAccessibleAndCreatedFoldersByUserRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
