// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: field_data.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addFieldData = `-- name: AddFieldData :one
INSERT INTO field_data (field_name, field_type, credential_id, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type AddFieldDataParams struct {
	FieldName    string        `json:"fieldName"`
	FieldType    string        `json:"fieldType"`
	CredentialID uuid.UUID     `json:"credentialId"`
	CreatedBy    uuid.NullUUID `json:"createdBy"`
	UpdatedBy    uuid.NullUUID `json:"updatedBy"`
}

func (q *Queries) AddFieldData(ctx context.Context, arg AddFieldDataParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addFieldData,
		arg.FieldName,
		arg.FieldType,
		arg.CredentialID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteFields = `-- name: DeleteFields :exec
DELETE FROM field_data WHERE id = ANY($1::UUID[])
`

func (q *Queries) DeleteFields(ctx context.Context, fieldIds []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFields, pq.Array(fieldIds))
	return err
}
