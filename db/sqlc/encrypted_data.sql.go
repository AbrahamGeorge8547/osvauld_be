// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: encrypted_data.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const fetchEncryptedFieldsByCredentialIDAndUserID = `-- name: FetchEncryptedFieldsByCredentialIDAndUserID :many
SELECT
    id,
    field_name,
    field_value
FROM
    encrypted_data
WHERE
    credential_id = $1
    AND user_id = $2
`

type FetchEncryptedFieldsByCredentialIDAndUserIDParams struct {
	CredentialID uuid.UUID `json:"credentialId"`
	UserID       uuid.UUID `json:"userId"`
}

type FetchEncryptedFieldsByCredentialIDAndUserIDRow struct {
	ID         uuid.UUID `json:"id"`
	FieldName  string    `json:"fieldName"`
	FieldValue string    `json:"fieldValue"`
}

func (q *Queries) FetchEncryptedFieldsByCredentialIDAndUserID(ctx context.Context, arg FetchEncryptedFieldsByCredentialIDAndUserIDParams) ([]FetchEncryptedFieldsByCredentialIDAndUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchEncryptedFieldsByCredentialIDAndUserID, arg.CredentialID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchEncryptedFieldsByCredentialIDAndUserIDRow{}
	for rows.Next() {
		var i FetchEncryptedFieldsByCredentialIDAndUserIDRow
		if err := rows.Scan(&i.ID, &i.FieldName, &i.FieldValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
